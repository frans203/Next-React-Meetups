{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Users\\\\PC\\\\Documents\\\\REACT\\\\projects\\\\project_8\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nconst MeetupDetails = props => {\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    address: props.address,\n    title: props.title,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://frans203:shelby123@cluster0.qjfec.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db();\n  const getCollections = db.collection(\"meetups\");\n  const collections = await getCollections.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: collections.map(item => ({\n      params: {\n        meetupId: item._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect(\"mongodb+srv://frans203:shelby123@cluster0.qjfec.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\");\n  const db = client.db();\n  const getCollections = db.collection(\"meetups\");\n  const selectedMeetup = await getCollections.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/Users/PC/Documents/REACT/projects/project_8/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","console","log","image","address","title","description","getStaticPaths","client","connect","db","getCollections","collection","collections","find","_id","toArray","close","fallback","paths","map","item","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData","id"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AACA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACG,KADf;AAEE,IAAA,OAAO,EAAEH,KAAK,CAACI,OAFjB;AAGE,IAAA,KAAK,EAAEJ,KAAK,CAACK,KAHf;AAIE,IAAA,WAAW,EAAEL,KAAK,CAACM;AAJrB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAVD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,yGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAvB;AACA,QAAMC,WAAW,GAAG,MAAMF,cAAc,CAACG,IAAf,CAAoB,EAApB,EAAwB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAAxB,EAAoCC,OAApC,EAA1B;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,WAAW,CAACO,GAAZ,CAAiBC,IAAD,KAAW;AAChCC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AAAZ;AADwB,KAAX,CAAhB;AAFF,GAAP;AAMD,CAdM;AAeP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C,QAAM;AAAEH,IAAAA;AAAF,MAAeG,OAAO,CAACJ,MAA7B;AACA,QAAMd,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,yGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AACA,QAAMC,cAAc,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAAvB;AACA,QAAMe,cAAc,GAAG,MAAMhB,cAAc,CAACiB,OAAf,CAAuB;AAClDb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AADqC,GAAvB,CAA7B;AAGAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLjB,IAAAA,KAAK,EAAE;AACL6B,MAAAA,UAAU,EAAE;AACVC,QAAAA,EAAE,EAAEH,cAAc,CAACZ,GAAf,CAAmBS,QAAnB,EADM;AAEVrB,QAAAA,KAAK,EAAEwB,cAAc,CAACxB,KAFZ;AAGVE,QAAAA,KAAK,EAAEsB,cAAc,CAACtB,KAHZ;AAIVD,QAAAA,OAAO,EAAEuB,cAAc,CAACvB,OAJd;AAKVE,QAAAA,WAAW,EAAEqB,cAAc,CAACrB;AALlB;AADP;AADF,GAAP;AAWD,CAtBM;AAuBP,eAAeP,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nconst MeetupDetails = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <MeetupDetail\r\n      image={props.image}\r\n      address={props.address}\r\n      title={props.title}\r\n      description={props.description}\r\n    />\r\n  );\r\n};\r\nexport const getStaticPaths = async () => {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://frans203:shelby123@cluster0.qjfec.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const getCollections = db.collection(\"meetups\");\r\n  const collections = await getCollections.find({}, { _id: 1 }).toArray();\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: collections.map((item) => ({\r\n      params: { meetupId: item._id.toString() },\r\n    })),\r\n  };\r\n};\r\nexport const getStaticProps = async (context) => {\r\n  const { meetupId } = context.params;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://frans203:shelby123@cluster0.qjfec.mongodb.net/myFirstDatabase?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const getCollections = db.collection(\"meetups\");\r\n  const selectedMeetup = await getCollections.findOne({\r\n    _id: ObjectId(meetupId),\r\n  });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        image: selectedMeetup.image,\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n  };\r\n};\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}